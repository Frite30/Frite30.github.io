<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/09/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>C-基础笔记1</title>
    <url>/2024/07/22/C-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/C-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h1 id="核心语法1"><a href="#核心语法1" class="headerlink" title="核心语法1"></a>核心语法1</h1><h4 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a><strong>1.注释</strong></h4><p><strong><em>==增加代码的可阅读性==</em></strong></p>
<p>//用于单行注释</p>
<p>/<em>    </em>/用于多行注释</p>
<h4 id="2-常量"><a href="#2-常量" class="headerlink" title="2.常量"></a><strong>2.常量</strong></h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">常量类型</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">整型常量</td>
<td style="text-align:center">正数,负数,0</td>
<td style="text-align:center">123</td>
</tr>
<tr>
<td style="text-align:center">实型常量</td>
<td style="text-align:center">所有带小数点的数字</td>
<td style="text-align:center">1.93  18.2</td>
</tr>
<tr>
<td style="text-align:center">字符常量</td>
<td style="text-align:center"><strong>单引号</strong>引起来的<strong>字母,数字,英文符号</strong></td>
<td style="text-align:center">‘A’ ‘C’</td>
</tr>
<tr>
<td style="text-align:center">字符串常量</td>
<td style="text-align:center"><strong>双引号</strong>引起来</td>
<td style="text-align:center">“ABC”</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><strong>扩展1</strong>:实型常量小数点前后可为0,可以忽略</li>
</ul>
<p>.93 等于 0.93                 18.等于18.0</p>
<ul>
<li><p><strong>扩展2</strong>:科学计数法是实型常量,但是要写E</p>
<p>1.2340000 * 10^7^  不是常量,是一个计算的过程</p>
<p>1.2340000E7 是实型常量</p>
</li>
</ul>
<h4 id="3-输出常量"><a href="#3-输出常量" class="headerlink" title="3.输出常量"></a>3.输出常量</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">格式控制符</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">单词</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">整型</td>
<td style="text-align:center">%d</td>
<td style="text-align:center">decimal</td>
</tr>
<tr>
<td style="text-align:center">实型</td>
<td style="text-align:center">%f</td>
<td style="text-align:center">floating-point</td>
</tr>
<tr>
<td style="text-align:center">字符</td>
<td style="text-align:center">%c</td>
<td style="text-align:center">character</td>
</tr>
<tr>
<td style="text-align:center">字符串</td>
<td style="text-align:center">%s</td>
<td style="text-align:center">string</td>
</tr>
</tbody>
</table>
</div>
<p>printf(参数1,参数2)</p>
<p>参数一:输出内容的最终样式,以<strong>字符串</strong>的形式体现</p>
<p>参数二:填补的内容</p>
<p><strong>==输出换行==可加上代码\n</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我的身高是: %f米\n&quot;</span>, <span class="number">1.85</span> );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我的年龄是: %d岁\n&quot;</span>, <span class="number">18</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="核心语法2"><a href="#核心语法2" class="headerlink" title="核心语法2"></a>核心语法2</h1><h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">整数</th>
<th style="text-align:center">小数</th>
<th style="text-align:center">字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">int,short,long,long long (C99)</td>
<td style="text-align:center">float,double</td>
<td style="text-align:center">char</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">short</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line">    <span class="type">long</span> b = <span class="number">10L</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> c = <span class="number">10LL</span>;</span><br><span class="line">    <span class="comment">//注意long,long long要加后缀,同时打印也要加</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%ld,%lld\n&quot;</span>, b, c);</span><br><span class="line">    <span class="comment">//利用sizeof测量数据类型字节</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%zu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%zu\n&quot;</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="comment">//有符号整数,无符号整数定义情况</span></span><br><span class="line">    <span class="comment">//signed 有符号整数 正数,负数</span></span><br><span class="line">    <span class="comment">//unsigned 无符号整数 正数</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">int</span> e = <span class="number">-100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, e);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> f = <span class="number">-20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">3.14F</span>;</span><br><span class="line">    <span class="type">double</span> b = <span class="number">1.78</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>占用字节可用sizeof测量</li>
<li>后缀: long(L),long long(LL),float(F)</li>
</ul>
<h4 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2.标识符"></a>2.标识符</h4><ul>
<li>由数字,字母,下划线组成</li>
<li>不能以数字开头</li>
<li>不能是关键字</li>
<li>区分大小写        ==aB与Ab不一样==</li>
<li>用英文单词,见名知意</li>
<li>变量名 全部小写</li>
</ul>
<h4 id="3-键盘录入"><a href="#3-键盘录入" class="headerlink" title="3.键盘录入"></a>3.键盘录入</h4><p>scanf,是scanner format的缩写, C语言提供的一个函数</p>
<p>获取用户在键盘上的数据,并赋值给变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;变量名);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>切记不要写<code>scanf(&quot;%d\n&quot;, &amp;a);</code>否则scanf在读取时会尝试读取一个\n此时按下enter没反应 不要犯错哦</strong></p>
<p>==先定义变量 再输出==</p>
<p><strong>字符串变量定义方式：</strong></p>
<p><strong>数据类型 变量名[大小] = 字符串</strong></p>
<p>char str[4] = “aaa”;</p>
<p>内存大小计算方式:</p>
<p>英文: 一个字母, 符号, 数字占一个字节</p>
<p>中文:vs和vc中,默认一个中文占两个字节</p>
<p>结束标记: 一个字节</p>
<p>键盘录入多个数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> height;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please type your name age height in order\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s %d %f&quot;</span>,&amp;str, &amp;age, &amp;height);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;your name is %s,age %d, height %.2f&quot;</span>,str, age, height);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C-基础笔记</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C-基础笔记2</title>
    <url>/2024/08/01/C-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/C-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<h3 id="算术运算符-取余"><a href="#算术运算符-取余" class="headerlink" title="算术运算符: + - * / %(取余)"></a><strong>算术运算符: + - * / %(取余)</strong></h3><p>1.通用细节:</p>
<ul>
<li>整数计算,结果一定是整数</li>
</ul>
<p>例如10 / 3 结果为3 而得不到3.333</p>
<ul>
<li><p>小数计算,结果一定是小数</p>
</li>
<li><p>整数和小数计算,结果一定是小数</p>
</li>
<li><p>小数直接参与计算,结果可能不精确</p>
</li>
</ul>
<p>(计算机中存储方式为二进制,因此浮点数不准确)</p>
<p>2.取余细节</p>
<ul>
<li>运算的数据必须全部是整数</li>
<li>获取余数的正负,是跟第一个数字保持一致的</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//键盘录入一个三位数，将其拆分为个位 十位 百位</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please type a number betweeen 100 and 999\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;BAI WEI SHI %d\n&quot;</span>,a / <span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SHI WEI SHI %d\n&quot;</span>,a/<span class="number">10</span> % <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;GE WEI SHI %d\n&quot;</span>,a % <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==计算时,数据模型不一样不能直接运算,需要转换成一样的,才能运算==</p>
<h4 id="隐式转换-把一个取值范围小的-转成取值范围大的"><a href="#隐式转换-把一个取值范围小的-转成取值范围大的" class="headerlink" title="隐式转换:把一个取值范围小的,转成取值范围大的"></a>隐式转换:把一个取值范围小的,转成取值范围大的</h4><p>规则1: 取值范围小的,和取值范围大的,小的会自动升为大的,在进行运算</p>
<p>规则2: short char类型的数据在运算的时候,先提升为int,在进行计算</p>
<p>==<em>取值范围:</em>char&lt;short&lt;int&lt;long&lt;long long&lt;float&lt;double==</p>
<p>不同的数据类型进行计算,赋值等操作,会触发隐式转换</p>
<h4 id="强制转换-如果把取值范围大的-赋值给取值范围小的-就需要进行强制转换"><a href="#强制转换-如果把取值范围大的-赋值给取值范围小的-就需要进行强制转换" class="headerlink" title="强制转换:如果把取值范围大的,赋值给取值范围小的,就需要进行强制转换"></a>强制转换:如果把取值范围大的,赋值给取值范围小的,就需要进行强制转换</h4><p>格式: 目标数据类型 变量名 = (目标数据类型)被强制转换的数据;</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="type">short</span> i = (<span class="type">short</span>)b;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">short</span> s1 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">short</span> s2 = <span class="number">20</span>;</span><br><span class="line">    <span class="type">short</span> result = (<span class="type">short</span>)(s1 + s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符相加"><a href="#字符相加" class="headerlink" title="字符相加"></a>字符相加</h4><p>字符跟数字进行转化的时候会查询ASCII码表(可直接用看)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="自增自减运算符-和—"><a href="#自增自减运算符-和—" class="headerlink" title="自增自减运算符:++和—"></a>自增自减运算符:++和—</h3><p>++表示 变量中的值+1; —表示 变量中的值-1;</p>
<p>++和—放在变量的前面或者后面,单独写一行结果是一样的</p>
<p>自增自减运算符应用场景:年龄增长,增减货物数量等等</p>
<p><strong>自增自减运算符扩展用法</strong></p>
<p>参与计算:例如定义 <code>int a = 10;</code></p>
<p><code>int b = a++;</code>先用后加,此时使用的是原来的值 得到b为10</p>
<p><code>int b = ++a;</code>先加后用,此时使用的是自增之后的值 得到b为11</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> k = i++ + ++i - --j - i--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, k);</span><br><span class="line">    <span class="comment">//win: 11+11-7-11</span></span><br><span class="line">    <span class="comment">//mac: 10+12-4-12</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//windows:7</span></span><br><span class="line">    <span class="comment">//前缀优先于后缀</span></span><br><span class="line">    <span class="comment">//前缀统一自增/自减,再把结果拿出来用</span></span><br><span class="line">    <span class="comment">//int i = 10;</span></span><br><span class="line">    <span class="comment">//++i + ++i;</span></span><br><span class="line">    <span class="comment">//12  + 12 = 24</span></span><br><span class="line">    <span class="comment">//后缀统一先用,等整个表达式中变量用完了,再进行自减</span></span><br><span class="line">    <span class="comment">//int i = 10;</span></span><br><span class="line">    <span class="comment">//++i + ++i;</span></span><br><span class="line">    <span class="comment">// 10 + 10 = 20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//mac,linux:6</span></span><br><span class="line">    <span class="comment">//前缀和后缀优先级一样,从左到右依次计算,每一个前缀后缀都是一个独立的个体</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">举例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">直接赋值</td>
<td style="text-align:center">int a=10,将10的值赋值给a</td>
</tr>
<tr>
<td style="text-align:center">+=</td>
<td style="text-align:center">加后赋值</td>
<td style="text-align:center">a+=b,将a+b的值给a(左右相加赋值给左边对右边没影响 下面同理)</td>
</tr>
<tr>
<td style="text-align:center">-=</td>
<td style="text-align:center">减后赋值</td>
<td style="text-align:center">a-=b,将a-b的值给a</td>
</tr>
<tr>
<td style="text-align:center">*=</td>
<td style="text-align:center">乘后赋值</td>
<td style="text-align:center">a*=b, 将a乘以b的值给a</td>
</tr>
<tr>
<td style="text-align:center">/=</td>
<td style="text-align:center">除后赋值</td>
<td style="text-align:center">a/=b,将a除以b的商给a</td>
</tr>
<tr>
<td style="text-align:center">%=</td>
<td style="text-align:center">取余赋值</td>
<td style="text-align:center">a%=b,将a除以b的余数给a</td>
</tr>
</tbody>
</table>
</div>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>==成立1(真) 不成立0(假)==</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">a==b 判断a是否等于b</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">a!=b 判断a是否不等于b</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">a&gt;b 判断a是否大于b</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">a&gt;=b 判断a是否大于等于b</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">a&lt;b 判断a是否小于b</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">a&lt;=b 判断a是否小于等于b</td>
</tr>
</tbody>
</table>
</div>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">与(而且)</td>
<td style="text-align:center">两边都为真,结果才是真(同时满足)</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">\</td>
<td style="text-align:center"></td>
<td>或(或者)</td>
<td>两边都为假,结果才是假(二选一)</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">非(取反)</td>
<td style="text-align:center">取反</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//键盘录入一个两位数，要求数字不能包含7</span></span><br><span class="line">    <span class="comment">//如果符合要求，输出1，不符合要求输出0</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type a num between 10 and 99\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="type">int</span> ge = a % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> shi = a/<span class="number">10</span> %<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> result = (ge != <span class="number">7</span> &amp;&amp; shi != <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>逻辑运算符的短路效果</strong></p>
<p>&amp;&amp;与(而且) ||或(或者)  具有<strong>短路</strong>效果</p>
<p>例如定义int a = 0;此时<code>printf(&quot;%d\n&quot;, a&gt;1 &amp;&amp; a&lt;10);</code>此时运行时,由于左边已得出结果为0可确定,因此右边不参与计算</p>
<p>==规则: 当左边的表达式能确定整个表达式的结果了,右边不会参与计算==</p>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>格式:关系表达式? 表达式1: 表达式2;</p>
<p>运行规则:先执行关系表达式(做一个判断).若结果成立,执行表达式1;若结果不成立,执行表达式2.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取三个变量中的最大值</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="type">int</span> c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;type three numbers\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    <span class="type">int</span> d = a &gt; b ? a : b;</span><br><span class="line">    <span class="type">int</span> e = d &gt; c ? d : c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The biggest number is %d&quot;</span>,e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h3><p>表达式1,表达式2,…..,表达式n</p>
<ul>
<li>从左到右</li>
<li>最后一个子表达式的结果, 是整个表达式的结果</li>
<li>优先级最低(永远是最后执行)</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.变成绝对值</span></span><br><span class="line">    <span class="comment">//2.除以3获取余数</span></span><br><span class="line">    <span class="comment">//3.乘以10</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Type a number\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="type">int</span> b = a &gt;= <span class="number">0</span> ? a : -a;</span><br><span class="line">    <span class="type">int</span> c = b % <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> d = c * <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Result is %d&quot;</span>,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><ul>
<li><strong>小括号优先于所有</strong></li>
<li><strong>一元 &gt; 二元 &gt; 三元</strong></li>
<li><strong>&amp;&amp; &gt; || &gt; 赋值</strong></li>
</ul>
<p>一元:一个变量可以运算 </p>
<p>++ —(自增自减) + - !(正负取反)</p>
<p>二元:</p>
<p>乘除取余;加减;关系运算符(&gt;,&gt;=,&lt;,&lt;=,==,!=);逻辑 与(&amp;&amp;);逻辑 或(||)</p>
<p>三元:</p>
<p>三元运算符,赋值运算符,逗号运算符</p>
]]></content>
      <categories>
        <category>C-基础笔记</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C-基础笔记3</title>
    <url>/2024/08/06/C-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/C-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<h1 id="控制流程语句"><a href="#控制流程语句" class="headerlink" title="控制流程语句"></a>控制流程语句</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>从上往下依次执行，是程序的默认的执行过程</p>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>程序在执行的过程中出现了岔路</p>
<h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>作用:如果满足条件,才可以执行指定的代码(判断)</p>
<h4 id="格式1"><a href="#格式1" class="headerlink" title="格式1"></a>格式1</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)</span><br><span class="line">&#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>细节1:在C语言当中,如果判断的结果是一个数字,非0表示条件成立,0表示条件不成立</p>
<p>细节2:如果大括号里面的语句体只有一行，那么大括号可以省略不写</p>
<h4 id="格式2"><a href="#格式2" class="headerlink" title="格式2"></a>格式2</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">    语句体A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    语句体B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="格式3"><a href="#格式3" class="headerlink" title="格式3"></a>格式3</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达A)&#123;</span><br><span class="line">    语句体A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(关系表达式B)&#123;</span><br><span class="line">    语句体B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(关系表达式C)&#123;</span><br><span class="line">    语句体C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    语句体N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>作用:把所有的选择一一列举出来,根据不同的条件任选其一</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        语句体<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        语句体<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句体n;</span><br><span class="line">        <span class="keyword">break</span>;               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行流程:</p>
<ul>
<li>首先计算表达式的值</li>
<li>依次和case后面的值进行比较,如果有对应的值,就会执行相应的语句,在执行的过程中,遇到break就会结束</li>
<li>如果所有的case后面的值和表达式的值都不匹配,就会执行default里面的语句体,然后结束整个switch语句</li>
</ul>
<p>switch语句的更多细节:</p>
<ul>
<li>表达式:计算结果只能为 字符/整数</li>
<li>case: 值只能是 字符/整数 的字面量,不能是变量</li>
<li>case:值不能重复</li>
<li>break:表示中断,结束的意思,结束switch语句</li>
<li>default:所有情况都不匹配,执行该处的内容</li>
<li>default可以写在任意的位置,甚至可以省略不写</li>
</ul>
<h4 id="switch与if使用场景"><a href="#switch与if使用场景" class="headerlink" title="switch与if使用场景"></a>switch与if使用场景</h4><p>switch:有限个case进行匹配的情况,10个左右</p>
<p>if:一般是对一个范围进行判断</p>
<h4 id="case穿透"><a href="#case穿透" class="headerlink" title="case穿透"></a>case穿透</h4><ul>
<li>还是根据小括号中的表达式的结果去匹配对应的case</li>
<li>执行对应case里面的代码</li>
<li>如果在执行的过程中,遇到了break,那么直接结束整个switch.但是如果没有遇到break,就会继续执行下面case中的代码,直到遇到break,或者把整个switch中所有的代码全部执行完了,才会结束</li>
<li>case穿透只会往下穿,不会回到上面</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;whats the month\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;month);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the month is %d\n&quot;</span>, month);</span><br><span class="line">    <span class="keyword">switch</span>(month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;its winter&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;its spring&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;its summer&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;its autumn&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;no such month bitch&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环:重复的执行某项事情</p>
<p>初始化语句+条件判断语句+条件控制语句+循环体语句</p>
<p>初始化语句:循环开始的条件</p>
<p>条件判断语句:循环结束的条件</p>
<p>条件控制语句:控制循环的次数</p>
<p>循环体语句:重复执行的代码</p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for(初始化语句;条件判断语句;条件控制语句)</p>
<p>{</p>
<p>循环体语句</p>
<p>}</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;wtf\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行流程:</p>
<ul>
<li>执行初始化语句</li>
<li>执行条件判断语句,看结果是否成立(成立,执行循环体语句;不成立,则结束循环)</li>
<li>执行条件控制语句</li>
<li>回到2继续执行条件判断语句</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//求和 1.定义变量用来累加数据 2.获取范围内的数据 3.打印sum</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;<span class="comment">//记得定义在循环的外面哦</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">        sum = i + sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>变量的生命周期</strong>:变量只在所属的大括号中有效</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//对偶数和进行求和</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//判断，只有偶数才进行求和</span></span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            sum = sum + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;choose 2 numbers to define a scale\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a,&amp;b);</span><br><span class="line">    <span class="comment">//判断a b大小关系确认范围</span></span><br><span class="line">    <span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fuck you\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> min = a &lt; b ? a : b;</span><br><span class="line">    <span class="type">int</span> max = a &gt; b ? a : b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;you chose from %d to %d\n&quot;</span>,min,max);</span><br><span class="line">    <span class="comment">//定义变量计算个数,统计思想</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = min;i&lt;=max;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">6</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">8</span> ==<span class="number">0</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;there are %d numbers for ya\n&quot;</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">3</span>)&#123; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fuck you\n&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行流程与for循环类似</p>
<h3 id="for与while对比"><a href="#for与while对比" class="headerlink" title="for与while对比"></a>for与while对比</h3><p><strong>语法层面</strong></p>
<ul>
<li>for循环中,控制循环的变量,因为归属for循环的语法结构中,在for循环结束后,就不能再次被访问到了</li>
<li>while循环中,控制循环的变量,对于while来说不归属其语法结构中,在while循环结束后,该变量还可以继续使用</li>
</ul>
<p><strong>区别</strong></p>
<ul>
<li>for循环中,知道循环的次数或者循环的范围</li>
<li>while循环中,不知道循环的次数和范围,只知道循环的结束条件</li>
</ul>
<p>举例1:累加求和1~100 for</p>
<p>举例2:循环读取文件中的内容 while</p>
<p>一次循环只能读取一个字母或者汉字,因此while更合适</p>
<h3 id="简单循环算法"><a href="#简单循环算法" class="headerlink" title="简单循环算法"></a>简单循环算法</h3><ul>
<li><p>考虑循环的过程 寻找实现办法</p>
</li>
<li><p><strong>使用更大的数据类型</strong>：如果可能，使用 <code>long double</code> 代替 <code>double</code> 来提高精度。</p>
</li>
<li><strong>调整终止条件</strong>：在循环条件中加入一个小的容差值，例如 <code>while (n &lt; 8844430 + 1e-6)</code>，以确保即使存在轻微的误差，循环也能正确地终止。</li>
<li><strong>使用整数逻辑</strong>：如果问题允许，使用整数逻辑来避免浮点数精度问题。例如，使用 <code>int</code> 类型和 10 的幂次来表示毫米数，但这需要更多的编码工作来处理大数运算。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 世界上最高的峰 珠穆朗玛峰（8844.43m = 8844430 mm）</span></span><br><span class="line"><span class="comment">     * 假如一张纸足够大 厚度0.1mm</span></span><br><span class="line"><span class="comment">     * 折多少次 可以折成这个高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>; <span class="comment">// 纸张的初始厚度，以1/10毫米为单位</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &lt; <span class="number">88444300</span>) &#123;</span><br><span class="line">        n *= <span class="number">2</span>; <span class="comment">// 纸张厚度翻倍</span></span><br><span class="line">        count++; <span class="comment">// 每次折叠都增加计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修正输出语句，直接输出n的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;zui hou zhi de gao du shi %d \n&quot;</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;zhe le %d ci\n&quot;</span>, count); <span class="comment">// 输出折叠次数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure>
<p>先执行再判断,循环体至少执行一次</p>
<h1 id="循环高级"><a href="#循环高级" class="headerlink" title="循环高级"></a>循环高级</h1><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>( ; ; )&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;lol\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;lol\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;lol\n&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><p>跳转控制语句:在循环的过程中,跳到其他语句上执行</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>不能单独书写,只能写在switch,或者循环当中,表示结束 跳出的意思.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用for循环在100中获取数字</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//判断是否符合条件</span></span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> ==<span class="number">0</span>)&#123;</span><br><span class="line">        print(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>结束本次循环,继续下次循环</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;=<span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//跳过第三次循环进入第四次循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p>eg.打印99乘法表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;=i; j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d * %d = %d\t&quot;</span>,j,i,i*j);</span><br><span class="line">        <span class="comment">//其中\t表示制表打印,可自动对齐</span></span><br><span class="line">        <span class="comment">//制表符 长度可变的大空格</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>\t</strong>:制表符 长度可变的大空格</p>
<p>会根据前面字母的个数 在后面补空格, 让整体的长度达到8或者8的倍数,最少补一个,最多补八个</p>
<p>作用:打印表格数据时,可以对齐</p>
<p>eg.统计质数</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取小于等于整数n的质数数量</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 1.判读是否为质数</span></span><br><span class="line"><span class="comment">     * 2.添加范围</span></span><br><span class="line"><span class="comment">     * 3.统计</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="comment">//定义变量统计</span></span><br><span class="line">    <span class="type">int</span> countA = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">2</span>;j &lt;= <span class="number">100</span>;j++)&#123;</span><br><span class="line">       <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//统计在这个范围内有多少个数字能被number整除，判断是否为质数</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt; j;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(j % i == <span class="number">0</span>)&#123;</span><br><span class="line">               count++;</span><br><span class="line">               <span class="comment">//后面的其他数字没必要判断了</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">           countA++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,countA);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//累加1的1次方，2的2次方...10的10次方</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> res = <span class="number">0</span>;<span class="comment">//定义变量记录数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="built_in">pow</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i;j++)&#123;</span><br><span class="line">            <span class="built_in">pow</span> = <span class="built_in">pow</span> * i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//内循环结束之后，就表示每一个单独的选项，已经有结果了</span></span><br><span class="line">        <span class="comment">//累加目的，每一个选项结果单独相加</span></span><br><span class="line">        res = res + <span class="built_in">pow</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C-基础笔记</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C-基础笔记4</title>
    <url>/2024/09/16/C-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/C-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<p><strong>数组:一种容器 用来存储同种数据类型的多个值</strong></p>
<p>数组的定义</p>
<p>数组的初始化</p>
<p>元素访问</p>
<p>数组遍历</p>
<p>内存中的数组</p>
<p>数组的常见问题</p>
<p>数组的算法题</p>
<p>二维数组</p>
]]></content>
      <categories>
        <category>C-基础笔记</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++游戏开发1</title>
    <url>/2024/10/02/C++%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/C++%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%911/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C++游戏开发</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>控制（补充</title>
    <url>/2024/10/03/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><p>作用域 定义变量只在{}内部生效</p>
<p>初始化 <code>if(int pow = x * x; pow &lt; 100)</code></p>
<p>通常书写</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;if branch&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;else if branch&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;else branch&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>书写规范:同样如果只有一行代码可写成一行增加代码的可阅读性</strong></p>
<p><code>if(condition) only_one_statement</code></p>
<h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(init; condition;iteration)&#123;</span><br><span class="line">	loop-statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>循环嵌套</strong></p>
<p>示例九九乘法表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">9</span>; a++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> b = <span class="number">1</span>; b &lt;= a; b++)&#123;</span><br><span class="line">        cout &lt;&lt; format(<span class="string">&quot;&#123;&#125;*&#123;&#125;=&#123;:&lt;2&#125;&quot;</span>, a, b, a*b);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="跳转控制"><a href="#跳转控制" class="headerlink" title="跳转控制"></a>跳转控制</h2><p>break 打破循环,直接结束循环</p>
<p>coutinue 继续循环 跳过后续未执行的循环体,跳到迭代语句和循环条件之前</p>
<p>goto 任意跳转至某一个标签</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">label:</span><br><span class="line">  <span class="keyword">if</span>(i &lt; <span class="number">100</span>)&#123;</span><br><span class="line">      cin &gt;&gt; x;</span><br><span class="line">      sum += x;</span><br><span class="line">      i ++;</span><br><span class="line">      <span class="keyword">goto</span> label;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>基础数据类型与高级输出（补充</title>
    <url>/2024/10/03/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E9%AB%98%E7%BA%A7%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>第一位是0则表示false</p>
<p>否则表示true(1)</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h3 id="auto-可自动推导类型"><a href="#auto-可自动推导类型" class="headerlink" title="==auto== 可自动推导类型"></a>==auto== 可自动推导类型</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> var_i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> var_c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">auto</span> var_b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">auto</span> var_d = <span class="number">3.14</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(var_i).<span class="built_in">name</span>() &lt;&lt; endl;<span class="comment">//输出i,其余同理输出对应数据类型</span></span><br></pre></td></tr></table></figure>
<h2 id="输出数据"><a href="#输出数据" class="headerlink" title="输出数据"></a>输出数据</h2><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> d = <span class="number">255</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d);<span class="comment">//%d 十进制;%o 八进制;%x 十六进制;</span></span><br><span class="line"><span class="comment">//在前面加上# 即可输出对应进制 如 &quot;%#x\n&quot;,d 输出得到0xff 表示16进制(八进制前跟0;十六进制前跟0x)</span></span><br></pre></td></tr></table></figure>
<p>printf中输出不同大小的整形时,需要在类型前加大小修饰符</p>
<p>s<strong>h</strong>ort <strong>l</strong>ong <strong>l</strong>ong<strong>l</strong>ong</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> lld = <span class="number">2147486948</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, lld)</span><br></pre></td></tr></table></figure>
<h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><p>printf输出字符型用%c</p>
<h4 id="输出宽度"><a href="#输出宽度" class="headerlink" title="输出宽度"></a>输出宽度</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%7d|\n&quot;</span>, d);<span class="comment">//右对齐</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-7d|\n&quot;</span> d);<span class="comment">//左对齐</span></span><br></pre></td></tr></table></figure>
<h3 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h3><h4 id="数字类型-1"><a href="#数字类型-1" class="headerlink" title="数字类型"></a>数字类型</h4><p>C++中进行优化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; oct;</span><br><span class="line"><span class="comment">//cout &lt;&lt; dec; 十进制</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; hex; 十六进制</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; uppercase; 十六进制字母显示为大写(nouppercase小写)</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; showbase; 数字前显示进制符号</span></span><br><span class="line">cout.<span class="built_in">setf</span>(ios::oct, ios::basefield);</span><br><span class="line">cout.<span class="built_in">flag</span>(ios::oct);</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setbase</span>(<span class="number">8</span>);</span><br></pre></td></tr></table></figure>
<h4 id="字符型-1"><a href="#字符型-1" class="headerlink" title="字符型"></a>字符型</h4><p>cout直接输出字符型 cout &lt;&lt; c &lt;&lt; endl;</p>
<p><img src="E:\Blog\source\img\fixed pre.png" alt="fixed pre"></p>
<p>cout.precision();限制的是输出数字的个数</p>
<p>加上cout &lt;&lt; fixed; 限制则是输出小数点后的个数</p>
<h4 id="输出宽度-1"><a href="#输出宽度-1" class="headerlink" title="输出宽度"></a>输出宽度</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout.<span class="built_in">width</span>(<span class="number">7</span>);</span><br><span class="line">cout &lt;&lt; d &lt;&lt; <span class="string">&#x27;|&#x27;</span> &lt;&lt; endl;<span class="comment">//仅生效一次 默认右对齐</span></span><br><span class="line">cout &lt;&lt; left;<span class="comment">//来控制左右</span></span><br></pre></td></tr></table></figure>
<h3 id="format-C-20-新特性"><a href="#format-C-20-新特性" class="headerlink" title="format(C++ 20 新特性)"></a>format(C++ 20 新特性)</h3><h4 id="数字类型-2"><a href="#数字类型-2" class="headerlink" title="数字类型"></a>数字类型</h4><p>C++ 20 取二者之长</p>
<p><img src="E:\Blog\source\img\format.png" alt="format"></p>
<p>cout &lt;&lt; format(“{}”, c) &lt;&lt; endl;</p>
<p><img src="E:\Blog\source\img\fixed pre format.png" alt="fixed pre format"></p>
<h4 id="输出宽度-2"><a href="#输出宽度-2" class="headerlink" title="输出宽度"></a>输出宽度</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; format(<span class="string">&quot;&#123;:&gt;7&#125;|&quot;</span>, d) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// &gt;右对齐 &lt;左对齐 ^居中对齐</span></span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="E:\Blog\source\img\sum up.png" alt="sum up"></p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>运算</title>
    <url>/2024/10/03/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p>-用处 单独放在一个操作符前面 表示正负号反转</p>
<h3 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3><p>a = a + 5 等效于 a+=5</p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>C++转换示例</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> d;</span><br><span class="line">cin &gt;&gt; d;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)d &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<h2 id="常见数学函数"><a href="#常见数学函数" class="headerlink" title="常见数学函数"></a>常见数学函数</h2><p>先引入头文件<code>#include &lt;cmath&gt;</code>或者<code>#include &lt;math.h&gt;</code></p>
<p>返回的类型 函数名(参数的类型)     //例如乘方函数</p>
<p><code>double pow(double,double)//第一个参数底数,第二个参数指数</code></p>
<p><code>float pow(float,float)//函数名相同但类型不同,称之为函数重载</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>) &lt;&lt; endl; <span class="comment">//乘方</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">sqrt</span>(<span class="number">2</span>) &lt;&lt; endl;  <span class="comment">//开根号</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">abs</span>(<span class="number">-1</span>) &lt;&lt; endl;  <span class="comment">//绝对值</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">fmod</span>(<span class="number">10</span>, <span class="number">3.3</span>) &lt;&lt; endl; <span class="comment">//浮点数取模</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">ceil</span> (<span class="number">3.1</span>) &lt;&lt; endl;<span class="comment">//浮点数向上取整</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">floor</span>(<span class="number">2.9</span>) &lt;&lt; endl;<span class="comment">//浮点数向下取整</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">round</span>(<span class="number">1.49</span>) &lt;&lt;endl;<span class="comment">//四舍五入</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">cbrt</span>(<span class="number">27</span>) &lt;&lt;endl;<span class="comment">//立方根</span></span><br><span class="line">cout &lt;&lt;<span class="built_in">hypot</span>(<span class="number">3</span>,<span class="number">4</span>) &lt;&lt;endl;<span class="comment">//勾股定理</span></span><br><span class="line"><span class="comment">//可到cmath相关文档进行查阅</span></span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>同是int类型得到结果会舍去小数部分 例如 1 / 2 得到结果 0</strong></p>
<p><strong>应用 1.0 / 2 = 0.5 使用浮点数得到结果</strong></p>
<h2 id="逻辑相关运算"><a href="#逻辑相关运算" class="headerlink" title="逻辑相关运算"></a>逻辑相关运算</h2><p>见C基础笔记</p>
]]></content>
      <categories>
        <category>C++学习笔记</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Click Here!</title>
    <url>/2024/10/05/TEST/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5b4d6948b1cd16c5827df6df502a5bf690a5f5d44081db1d7314f7aa324d526b">c17fd90da575e10a463004871515efa2dcdf1281755d4e115baa775048b6b2daaae792c295ac4fc3361953e2b844bb9c32750ee098ec676533fa081773b096f2f7cf71e15e1737b154bff83db539c05b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
</search>
